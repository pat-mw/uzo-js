{"version":3,"sources":["components/theme/toggle.js","app.js"],"names":["colorModeToggle","attr","defaultVal","attrVal","defaultValType","trim","isNaN","htmlElement","document","documentElement","computed","getComputedStyle","toggleEl","togglePressed","scriptTag","querySelector","console","warn","colorModeDuration","getAttribute","colorModeEase","cssVariables","length","lightColors","darkColors","split","forEach","item","lightValue","getPropertyValue","concat","darkValue","Object","keys","setColors","colorObject","animate","gsap","to","duration","ease","key","style","setProperty","toggleElementsVisibility","dark","hideDarkElements","querySelectorAll","hideLightElements","element","display","goDark","localStorage","setItem","classList","add","remove","setAttribute","checkPreference","e","matches","colorPreference","window","matchMedia","addEventListener","storagePreference","getItem","event","contains","_toggle","require"],"mappings":"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","file":"app.js","sourceRoot":"..","sourcesContent":["/**\n * Dark Mode Toggle 1.0.2\n * Copyright 2023 Timothy Ricks\n * Released under the MIT License\n * Released on: November 28, 2023\n */\n\nexport function colorModeToggle() {\n  function attr(defaultVal, attrVal) {\n    const defaultValType = typeof defaultVal;\n    if (typeof attrVal !== \"string\" || attrVal.trim() === \"\") return defaultVal;\n    if (attrVal === \"true\" && defaultValType === \"boolean\") return true;\n    if (attrVal === \"false\" && defaultValType === \"boolean\") return false;\n    if (isNaN(attrVal) && defaultValType === \"string\") return attrVal;\n    if (!isNaN(attrVal) && defaultValType === \"number\") return +attrVal;\n    return defaultVal;\n  }\n\n  const htmlElement = document.documentElement;\n  const computed = getComputedStyle(htmlElement);\n  let toggleEl;\n  let togglePressed = \"false\";\n\n  const scriptTag = document.querySelector(\"[tr-color-vars]\");\n  if (!scriptTag) {\n    console.warn(\"Script tag with tr-color-vars attribute not found\");\n    return;\n  }\n\n  let colorModeDuration = attr(0.5, scriptTag.getAttribute(\"duration\"));\n  let colorModeEase = attr(\"power1.out\", scriptTag.getAttribute(\"ease\"));\n\n  const cssVariables = scriptTag.getAttribute(\"tr-color-vars\");\n  if (!cssVariables.length) {\n    console.warn(\"Value of tr-color-vars attribute not found\");\n    return;\n  }\n\n  let lightColors = {};\n  let darkColors = {};\n  cssVariables.split(\",\").forEach(function (item) {\n    let lightValue = computed.getPropertyValue(`--color--${item}`);\n    let darkValue = computed.getPropertyValue(`--dark--${item}`);\n    if (lightValue.length) {\n      if (!darkValue.length) darkValue = lightValue;\n      lightColors[`--color--${item}`] = lightValue;\n      darkColors[`--color--${item}`] = darkValue;\n    }\n  });\n\n  if (!Object.keys(lightColors).length) {\n    console.warn(\"No variables found matching tr-color-vars attribute value\");\n    return;\n  }\n\n  function setColors(colorObject, animate) {\n    if (typeof gsap !== \"undefined\" && animate) {\n      gsap.to(htmlElement, {\n        ...colorObject,\n        duration: colorModeDuration,\n        ease: colorModeEase,\n      });\n    } else {\n      Object.keys(colorObject).forEach(function (key) {\n        htmlElement.style.setProperty(key, colorObject[key]);\n      });\n    }\n  }\n\n  function toggleElementsVisibility(dark) {\n    const hideDarkElements = document.querySelectorAll(\"[tr-toggle-hide-dark]\");\n    const hideLightElements = document.querySelectorAll(\n      \"[tr-toggle-hide-light]\"\n    );\n\n    hideDarkElements.forEach((element) => {\n      element.style.display = dark ? \"none\" : \"\";\n    });\n\n    hideLightElements.forEach((element) => {\n      element.style.display = dark ? \"\" : \"none\";\n    });\n  }\n\n  function goDark(dark, animate) {\n    if (dark) {\n      localStorage.setItem(\"dark-mode\", \"true\");\n      htmlElement.classList.add(\"dark-mode\");\n      setColors(darkColors, animate);\n      togglePressed = \"true\";\n    } else {\n      localStorage.setItem(\"dark-mode\", \"false\");\n      htmlElement.classList.remove(\"dark-mode\");\n      setColors(lightColors, animate);\n      togglePressed = \"false\";\n    }\n    toggleElementsVisibility(dark);\n    if (typeof toggleEl !== \"undefined\") {\n      toggleEl.forEach(function (element) {\n        element.setAttribute(\"aria-pressed\", togglePressed);\n      });\n    }\n  }\n\n  function checkPreference(e) {\n    goDark(e.matches, false);\n  }\n  const colorPreference = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  colorPreference.addEventListener(\"change\", (e) => {\n    checkPreference(e);\n  });\n\n  let storagePreference = localStorage.getItem(\"dark-mode\");\n  if (storagePreference !== null) {\n    storagePreference === \"true\" ? goDark(true, false) : goDark(false, false);\n  } else {\n    checkPreference(colorPreference);\n  }\n\n  window.addEventListener(\"DOMContentLoaded\", (event) => {\n    toggleEl = document.querySelectorAll(\"[tr-color-toggle]\");\n    toggleEl.forEach(function (element) {\n      element.setAttribute(\"aria-label\", \"View Dark Mode\");\n      element.setAttribute(\"role\", \"button\");\n      element.setAttribute(\"aria-pressed\", togglePressed);\n    });\n    toggleEl.forEach(function (element) {\n      element.addEventListener(\"click\", function () {\n        let darkClass = htmlElement.classList.contains(\"dark-mode\");\n        darkClass ? goDark(false, true) : goDark(true, true);\n      });\n    });\n    // Initial call to set visibility based on current mode\n    let darkClass = htmlElement.classList.contains(\"dark-mode\");\n    toggleElementsVisibility(darkClass);\n  });\n}\n","import { colorModeToggle } from \"./components/theme/toggle\";\n\ncolorModeToggle();"]}